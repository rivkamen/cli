// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

####
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

####
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("cli")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("cli")]
[assembly: System.Reflection.AssemblyTitleAttribute("cli")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.

####
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("cli")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("cli")]
[assembly: System.Reflection.AssemblyTitleAttribute("cli")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.

####
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

####
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

####
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("fib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("fib")]
[assembly: System.Reflection.AssemblyTitleAttribute("fib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.

####
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

####
////using System.CommandLine;
////using System.IO;
////using System.Linq;
////{
////    var outputOption = new Option<FileInfo>(
////        new[] { "--output", "-o" },
////        "File path and name for the output bundle file.")
////    {
////        IsRequired = false
////    };
////    var languageOption = new Option<string[]>(
////        new[] { "--language", "-l" },
////        description: "List of programming languages to include (comma-separated). Use 'all' for all languages.")
////    {
////        IsRequired = false
////    };
////    var noteOption = new Option<bool>(
////        new[] { "--note", "-n" },
////        "Include file origin as comments.")
////    {
////        IsRequired = false
////    };
////    var sortOption = new Option<string>(
////        new[] { "--sort", "-s" },
////        "Sorting order: 'name' (default) or 'type'.")
////    {
////        IsRequired = false
////    };
////    var removeEmptyLinesOption = new Option<bool>(
////        new[] { "--remove-empty-lines", "-r" },
////        "Remove empty lines from source files.")
////    {
////        IsRequired = false
////    };
////    var bundleCommand = new Command("bundle", "Bundle code files into a single file.");
////    bundleCommand.AddOption(outputOption);
////    bundleCommand.AddOption(languageOption);
////    bundleCommand.AddOption(noteOption);
////    bundleCommand.AddOption(sortOption);
////    bundleCommand.AddOption(removeEmptyLinesOption);
////    bundleCommand.SetHandler(
////        (FileInfo output, string[] language, bool note, string sort, bool removeEmptyLines) =>
////        {
////            try
////            {
////                // Check if the current directory is bin, debug, or similar
////                var currentDirectory = Directory.GetCurrentDirectory();
////                var restrictedFolders = new[] { "bin", "debug" };
////                if (restrictedFolders.Any(folder => currentDirectory.Contains(folder, StringComparison.OrdinalIgnoreCase)))
////                {
////                    Console.WriteLine("Error: You cannot run this command from a 'bin', 'debug', or similar directory.");
////                    return;
////                }
////                var validLanguages = new[] { "csharp", "python", "javascript", "java", "html", "css", "jsx", "angular", "all" };
////                // Interactive prompts with validation for missing arguments
////                while (output == null || string.IsNullOrEmpty(output.FullName))
////                {
////                    Console.Write("Enter output file path: ");
////                    string outputPath = Console.ReadLine()!;
////                    if (!string.IsNullOrWhiteSpace(outputPath))
////                    {
////                        output = new FileInfo(outputPath);
////                    }
////                    else
////                    {
////                        Console.WriteLine("Invalid input. Please enter a valid file path.");
////                    }
////                }
////                while (language == null || language.Length == 0)
////                {
////                    Console.Write("Enter programming languages (comma-separated, or 'all'): ");
////                    string languagesInput = Console.ReadLine()!;
////                    var parsedLanguages = languagesInput.Split(',', StringSplitOptions.TrimEntries);
////                    if (parsedLanguages.All(lang => validLanguages.Contains(lang.ToLower())))
////                    {
////                        language = parsedLanguages;
////                    }
////                    else
////                    {
////                        Console.WriteLine("Invalid input. Supported languages are: csharp, python, javascript, java, html, css, jsx, angular, or 'all'.");
////                    }
////                }
////                while (string.IsNullOrEmpty(sort))
////                {
////                    Console.Write("Enter sort order ('name' or 'type'): ");
////                    sort = Console.ReadLine()?.ToLower();
////                    if (sort != "name" && sort != "type")
////                    {
////                        Console.WriteLine("Invalid input. Sorting order must be 'name' or 'type'.");
////                        sort = null;
////                    }
////                }
////                bool validInput = false;
////                while (!validInput)
////                {
////                    Console.Write("Include file origin as comments? (yes/no): ");
////                    string noteInput = Console.ReadLine()?.ToLower();
////                    if (noteInput == "yes" || noteInput == "no")
////                    {
////                        note = noteInput == "yes";
////                        validInput = true;
////                    }
////                    else
////                    {
////                        Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
////                    }
////                }
////                validInput = false;
////                while (!validInput)
////                {
////                    Console.Write("Remove empty lines? (yes/no): ");
////                    string removeEmptyLinesInput = Console.ReadLine()?.ToLower();
////                    if (removeEmptyLinesInput == "yes" || removeEmptyLinesInput == "no")
////                    {
////                        removeEmptyLines = removeEmptyLinesInput == "yes";
////                        validInput = true;
////                    }
////                    else
////                    {
////                        Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
////                    }
////                }
////                // Validate output directory
////                if (!output.Directory.Exists)
////                {
////                    Console.WriteLine("Error: The specified output directory does not exist.");
////                    return;
////                }
////                // Determine file extensions for the specified languages
////                var languageExtensions = new Dictionary<string, string[]>
////                {
////                    { "csharp", new[] { ".cs" } },
////                    { "python", new[] { ".py" } },
////                    { "javascript", new[] { ".js" } },
////                    { "java", new[] { ".java" } },
////                    { "html", new[] { ".html", ".htm" } },
////                    { "css", new[] { ".css" } },
////                    { "jsx", new[] { ".jsx" } },
////                    { "angular", new[] { ".ts" } }
////                };
////                var extensionsToInclude = language[0].ToLower() == "all"
////                    ? languageExtensions.Values.SelectMany(ext => ext).Distinct().ToArray()
////                    : language
////                        .Where(lang => languageExtensions.ContainsKey(lang.ToLower()))
////                        .SelectMany(lang => languageExtensions[lang.ToLower()])
////                        .Distinct()
////                        .ToArray();
////                if (!extensionsToInclude.Any())
////                {
////                    Console.WriteLine("Error: No valid languages specified.");
////                    return;
////                }
////                // Get all matching files in the current directory
////                var files = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.AllDirectories)
////                    .Where(file => extensionsToInclude.Contains(Path.GetExtension(file).ToLower()))
////                    .ToList();
////                if (!files.Any())
////                {
////                    Console.WriteLine("No files matching the specified languages were found.");
////                    return;
////                }
////                // Sorting files
////                files = sort == "type"
////                    ? files.OrderBy(file => Path.GetExtension(file)).ThenBy(Path.GetFileName).ToList()
////                    : files.OrderBy(Path.GetFileName).ToList();
////                // Create the output bundle
////                using var writer = new StreamWriter(output.FullName);
////                foreach (var file in files)
////                {
////                    if (note)
////                    {
////                        writer.WriteLine($"// Origin: {file}");
////                    }
////                    var lines = File.ReadAllLines(file);
////                    if (removeEmptyLines)
////                    {
////                        lines = lines.Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
////                    }
////                    foreach (var line in lines)
////                    {
////                        writer.WriteLine(line);
////                    }
////                    writer.WriteLine("\n####");
////                }
////                Console.WriteLine($"Bundle created at: {output.FullName}");
////            }
////            catch (Exception ex)
////            {
////                Console.WriteLine($"Error: {ex.Message}");
////            }
////        },
////        outputOption,
////        languageOption,
////        noteOption,
////        sortOption,
////        removeEmptyLinesOption
////    );
////    var createRspCommand = new Command("create-rsp", "Create a response file for the bundle command.");
////    createRspCommand.SetHandler(() =>
////    {
////        new Option<string>(
////                new[] { "--file", "-f" },
////                "The name of the response file to create (e.g., 'bundle.rsp').")
////        {
////            IsRequired = true
////        };
////    });
////    createRspCommand.SetHandler((string fileName) =>
////    {
////        try
////        {
////            // Check for valid file name
////            if (string.IsNullOrWhiteSpace(fileName) || !fileName.EndsWith(".rsp"))
////            {
////                Console.WriteLine("Error: The file name must end with '.rsp'.");
////                return;
////            }
////            // Collect parameters for the bundle command
////            Console.Write("Enter output file path: ");
////            string outputPath = Console.ReadLine()!;
////            Console.Write("Enter programming languages (comma-separated, or 'all'): ");
////            string languages = Console.ReadLine()!;
////            Console.Write("Include file origin as comments? (yes/no): ");
////            string includeNote = Console.ReadLine()!.ToLower() == "yes" ? "--note" : "";
////            Console.Write("Enter sort order ('name' or 'type'): ");
////            string sortOrder = Console.ReadLine()!;
////            Console.Write("Remove empty lines? (yes/no): ");
////            string removeEmptyLines = Console.ReadLine()!.ToLower() == "yes" ? "--remove-empty-lines" : "";
////            Console.Write("Enter author name (optional): ");
////            string authorName = Console.ReadLine();
////            // Validate inputs
////            if (string.IsNullOrWhiteSpace(outputPath) || string.IsNullOrWhiteSpace(languages) || string.IsNullOrWhiteSpace(sortOrder))
////            {
////                Console.WriteLine("Error: Output path, languages, and sort order are required.");
////                return;
////            }
////            // Construct the full bundle command
////            string command = $"bundle --output \"{outputPath}\" --language \"{languages}\" --sort {sortOrder} {includeNote} {removeEmptyLines}";
////            if (!string.IsNullOrWhiteSpace(authorName))
////            {
////                command += $" --author \"{authorName}\"";
////            }
////            // Write the command to the response file
////            File.WriteAllText(fileName, command);
////            Console.WriteLine($"Response file created: {Path.GetFullPath(fileName)}");
////        }
////        catch (Exception ex)
////        {
////            Console.WriteLine($"Error: {ex.Message}");
////        }
////    }, createRspCommand.Children.GetOption<string>("--file"));
////    var rootCommand = new RootCommand("Root command for file bundler CLI");
////    rootCommand.AddCommand(bundleCommand);
////    rootCommand.AddCommand(createRspCommand);
////    await rootCommand.InvokeAsync(args);
////}
//using System.CommandLine;
//using System.IO;
//using System.Linq;
//using System.Collections.Generic;
//class Program
//{
//    static async Task Main(string[] args)
//    {
//        var outputOption = new Option<FileInfo>(
//            new[] { "--output", "-o" },
//            "File path and name for the output bundle file.")
//        {
//            IsRequired = false
//        };
//        var languageOption = new Option<string[]>(
//            new[] { "--language", "-l" },
//            description: "List of programming languages to include (comma-separated). Use 'all' for all languages.")
//        {
//            IsRequired = false
//        };
//        var noteOption = new Option<bool>(
//            new[] { "--note", "-n" },
//            "Include file origin as comments.")
//        {
//            IsRequired = false
//        };
//        var sortOption = new Option<string>(
//            new[] { "--sort", "-s" },
//            "Sorting order: 'name' (default) or 'type'.")
//        {
//            IsRequired = false
//        };
//        var removeEmptyLinesOption = new Option<bool>(
//            new[] { "--remove-empty-lines", "-r" },
//            "Remove empty lines from source files.")
//        {
//            IsRequired = false
//        };
//        var bundleCommand = new Command("bundle", "Bundle code files into a single file.");
//        bundleCommand.AddOption(outputOption);
//        bundleCommand.AddOption(languageOption);
//        bundleCommand.AddOption(noteOption);
//        bundleCommand.AddOption(sortOption);
//        bundleCommand.AddOption(removeEmptyLinesOption);
//        bundleCommand.SetHandler(
//            (FileInfo output, string[] language, bool note, string sort, bool removeEmptyLines) =>
//            {
//                try
//                {
//                    // Check if the current directory is bin, debug, or similar
//                    var currentDirectory = Directory.GetCurrentDirectory();
//                    var restrictedFolders = new[] { "bin", "debug" };
//                    if (restrictedFolders.Any(folder => currentDirectory.Contains(folder, StringComparison.OrdinalIgnoreCase)))
//                    {
//                        Console.WriteLine("Error: You cannot run this command from a 'bin', 'debug', or similar directory.");
//                        return;
//                    }
//                    var validLanguages = new[] { "csharp", "python", "javascript", "java", "html", "css", "jsx", "angular", "all" };
//                    // Interactive prompts with validation for missing arguments
//                    while (output == null || string.IsNullOrEmpty(output.FullName))
//                    {
//                        Console.Write("Enter output file path: ");
//                        string outputPath = Console.ReadLine()!;
//                        if (!string.IsNullOrWhiteSpace(outputPath))
//                        {
//                            output = new FileInfo(outputPath);
//                        }
//                        else
//                        {
//                            Console.WriteLine("Invalid input. Please enter a valid file path.");
//                        }
//                    }
//                    while (language == null || language.Length == 0)
//                    {
//                        Console.Write("Enter programming languages (comma-separated, or 'all'): ");
//                        string languagesInput = Console.ReadLine()!;
//                        var parsedLanguages = languagesInput.Split(',', StringSplitOptions.TrimEntries);
//                        if (parsedLanguages.All(lang => validLanguages.Contains(lang.ToLower())))
//                        {
//                            language = parsedLanguages;
//                        }
//                        else
//                        {
//                            Console.WriteLine("Invalid input. Supported languages are: csharp, python, javascript, java, html, css, jsx, angular, or 'all'.");
//                        }
//                    }
//                    while (string.IsNullOrEmpty(sort))
//                    {
//                        Console.Write("Enter sort order ('name' or 'type'): ");
//                        sort = Console.ReadLine()?.ToLower();
//                        if (sort != "name" && sort != "type")
//                        {
//                            Console.WriteLine("Invalid input. Sorting order must be 'name' or 'type'.");
//                            sort = null;
//                        }
//                    }
//                    bool validInput = false;
//                    while (!validInput)
//                    {
//                        Console.Write("Include file origin as comments? (yes/no): ");
//                        string noteInput = Console.ReadLine()?.ToLower();
//                        if (noteInput == "yes" || noteInput == "no")
//                        {
//                            note = noteInput == "yes";
//                            validInput = true;
//                        }
//                        else
//                        {
//                            Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
//                        }
//                    }
//                    validInput = false;
//                    while (!validInput)
//                    {
//                        Console.Write("Remove empty lines? (yes/no): ");
//                        string removeEmptyLinesInput = Console.ReadLine()?.ToLower();
//                        if (removeEmptyLinesInput == "yes" || removeEmptyLinesInput == "no")
//                        {
//                            removeEmptyLines = removeEmptyLinesInput == "yes";
//                            validInput = true;
//                        }
//                        else
//                        {
//                            Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
//                        }
//                    }
//                    // Validate output directory
//                    if (!output.Directory.Exists)
//                    {
//                        Console.WriteLine("Error: The specified output directory does not exist.");
//                        return;
//                    }
//                    // Determine file extensions for the specified languages
//                    var languageExtensions = new Dictionary<string, string[]>
//                    {
//                        { "csharp", new[] { ".cs" } },
//                        { "python", new[] { ".py" } },
//                        { "javascript", new[] { ".js" } },
//                        { "java", new[] { ".java" } },
//                        { "html", new[] { ".html", ".htm" } },
//                        { "css", new[] { ".css" } },
//                        { "jsx", new[] { ".jsx" } },
//                        { "angular", new[] { ".ts" } }
//                    };
//                    var extensionsToInclude = language[0].ToLower() == "all"
//                        ? languageExtensions.Values.SelectMany(ext => ext).Distinct().ToArray()
//                        : language
//                            .Where(lang => languageExtensions.ContainsKey(lang.ToLower()))
//                            .SelectMany(lang => languageExtensions[lang.ToLower()])
//                            .Distinct()
//                            .ToArray();
//                    if (!extensionsToInclude.Any())
//                    {
//                        Console.WriteLine("Error: No valid languages specified.");
//                        return;
//                    }
//                    // Get all matching files in the current directory
//                    var files = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.AllDirectories)
//                        .Where(file => extensionsToInclude.Contains(Path.GetExtension(file).ToLower()))
//                        .ToList();
//                    if (!files.Any())
//                    {
//                        Console.WriteLine("No files matching the specified languages were found.");
//                        return;
//                    }
//                    // Sorting files
//                    files = sort == "type"
//                        ? files.OrderBy(file => Path.GetExtension(file)).ThenBy(Path.GetFileName).ToList()
//                        : files.OrderBy(Path.GetFileName).ToList();
//                    // Create the output bundle
//                    using var writer = new StreamWriter(output.FullName);
//                    foreach (var file in files)
//                    {
//                        if (note)
//                        {
//                            writer.WriteLine($"// Origin: {file}");
//                        }
//                        var lines = File.ReadAllLines(file);
//                        if (removeEmptyLines)
//                        {
//                            lines = lines.Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
//                        }
//                        foreach (var line in lines)
//                        {
//                            writer.WriteLine(line);
//                        }
//                        writer.WriteLine("\n####");
//                    }
//                    Console.WriteLine($"Bundle created at: {output.FullName}");
//                }
//                catch (Exception ex)
//                {
//                    Console.WriteLine($"Error: {ex.Message}");
//                }
//            },
//            outputOption,
//            languageOption,
//            noteOption,
//            sortOption,
//            removeEmptyLinesOption
//        );
//        var createRspCommand = new Command("create-rsp", "Create a response file for the bundle command.");
//        createRspCommand.SetHandler(() =>
//        {
//            new Option<string>(new[] { "--file", "-f" }, "The name of the response file to create (e.g., 'bundle.rsp')")
//            {
//                IsRequired = true
//            };
//        });
//        createRspCommand.SetHandler((string fileName) =>
//        {
//            try
//            {
//                // Check for valid file name
//                if (string.IsNullOrWhiteSpace(fileName) || !fileName.EndsWith(".rsp"))
//                {
//                    Console.WriteLine("Error: The file name must end with '.rsp'.");
//                    return;
//                }
//                // Collect parameters for the bundle command
//                Console.Write("Enter output file path: ");
//                string outputPath = Console.ReadLine()!;
//                Console.Write("Enter programming languages (comma-separated, or 'all'): ");
//                string languages = Console.ReadLine()!;
//                Console.Write("Include file origin as comments? (yes/no): ");
//                string includeNote = Console.ReadLine()!.ToLower() == "yes" ? "--note" : "";
//                Console.Write("Enter sort order ('name' or 'type'): ");
//                string sortOrder = Console.ReadLine()!;
//                Console.Write("Remove empty lines? (yes/no): ");
//                string removeEmptyLines = Console.ReadLine()!.ToLower() == "yes" ? "--remove-empty-lines" : "";
//                Console.Write("Enter author name (optional): ");
//                string authorName = Console.ReadLine();
//                // Validate inputs
//                if (string.IsNullOrWhiteSpace(outputPath) || string.IsNullOrWhiteSpace(languages) || string.IsNullOrWhiteSpace(sortOrder))
//                {
//                    Console.WriteLine("Error: Output path, languages, and sort order are required.");
//                    return;
//                }
//                // Construct the full bundle command
//                string command = $"bundle --output \"{outputPath}\" --language \"{languages}\" --sort {sortOrder} {includeNote} {removeEmptyLines}";
//                if (!string.IsNullOrEmpty(authorName))
//                {
//                    command += $" --author {authorName}";
//                }
//                // Write the response file
//                File.WriteAllText(fileName, command);
//                Console.WriteLine($"Response file created: {fileName}");
//            }
//            catch (Exception ex)
//            {
//                Console.WriteLine($"Error: {ex.Message}");
//            }
//        });
//        // Create the root command and add all subcommands
//        var rootCommand = new RootCommand("File bundler CLI");
//        rootCommand.AddCommand(bundleCommand);
//        rootCommand.AddCommand(createRspCommand);
//        // Parse and invoke the commands
//        await rootCommand.InvokeAsync(args);
//    }
//}
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Collections.Generic;
class Program
{
    static async Task Main(string[] args)
    {
        var outputOption = new Option<FileInfo>(
            new[] { "--output", "-o" },
            "File path and name for the output bundle file.")
        {
            IsRequired = false
        };
        var languageOption = new Option<string[]>(
            new[] { "--language", "-l" },
            description: "List of programming languages to include (comma-separated). Use 'all' for all languages.")
        {
            IsRequired = false
        };
        var noteOption = new Option<bool>(
            new[] { "--note", "-n" },
            "Include file origin as comments.")
        {
            IsRequired = false
        };
        var sortOption = new Option<string>(
            new[] { "--sort", "-s" },
            "Sorting order: 'name' (default) or 'type'.")
        {
            IsRequired = false
        };
        var removeEmptyLinesOption = new Option<bool>(
            new[] { "--remove-empty-lines", "-r" },
            "Remove empty lines from source files.")
        {
            IsRequired = false
        };
        var bundleCommand = new Command("bundle", "Bundle code files into a single file.");
        bundleCommand.AddOption(outputOption);
        bundleCommand.AddOption(languageOption);
        bundleCommand.AddOption(noteOption);
        bundleCommand.AddOption(sortOption);
        bundleCommand.AddOption(removeEmptyLinesOption);
        bundleCommand.SetHandler(
            async (FileInfo output, string[] language, bool note, string sort, bool removeEmptyLines) =>
            {
                try
                {
                    // Check if the current directory is bin, debug, or similar
                    var currentDirectory = Directory.GetCurrentDirectory();
                    var restrictedFolders = new[] { "bin", "debug" };
                    if (restrictedFolders.Any(folder => currentDirectory.Contains(folder, StringComparison.OrdinalIgnoreCase)))
                    {
                        Console.WriteLine("Error: You cannot run this command from a 'bin', 'debug', or similar directory.");
                        return;
                    }
                    var validLanguages = new[] { "csharp", "python", "javascript", "java", "html", "css", "jsx", "angular", "all" };
                    // Interactive prompts with validation for missing arguments
                    while (output == null || string.IsNullOrEmpty(output.FullName))
                    {
                        Console.Write("Enter output file path: ");
                        string outputPath = Console.ReadLine()!;
                        if (!string.IsNullOrWhiteSpace(outputPath))
                        {
                            output = new FileInfo(outputPath);
                        }
                        else
                        {
                            Console.WriteLine("Invalid input. Please enter a valid file path.");
                        }
                    }
                    while (language == null || language.Length == 0)
                    {
                        Console.Write("Enter programming languages (comma-separated, or 'all'): ");
                        string languagesInput = Console.ReadLine()!;
                        var parsedLanguages = languagesInput.Split(',', StringSplitOptions.TrimEntries);
                        if (parsedLanguages.All(lang => validLanguages.Contains(lang.ToLower())))
                        {
                            language = parsedLanguages;
                        }
                        else
                        {
                            Console.WriteLine("Invalid input. Supported languages are: csharp, python, javascript, java, html, css, jsx, angular, or 'all'.");
                        }
                    }
                    while (string.IsNullOrEmpty(sort))
                    {
                        Console.Write("Enter sort order ('name' or 'type'): ");
                        sort = Console.ReadLine()?.ToLower();
                        if (sort != "name" && sort != "type")
                        {
                            Console.WriteLine("Invalid input. Sorting order must be 'name' or 'type'.");
                            sort = null;
                        }
                    }
                    bool validInput = false;
                    while (!validInput)
                    {
                        Console.Write("Include file origin as comments? (yes/no): ");
                        string noteInput = Console.ReadLine()?.ToLower();
                        if (noteInput == "yes" || noteInput == "no")
                        {
                            note = noteInput == "yes";
                            validInput = true;
                        }
                        else
                        {
                            Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
                        }
                    }
                    validInput = false;
                    while (!validInput)
                    {
                        Console.Write("Remove empty lines? (yes/no): ");
                        string removeEmptyLinesInput = Console.ReadLine()?.ToLower();
                        if (removeEmptyLinesInput == "yes" || removeEmptyLinesInput == "no")
                        {
                            removeEmptyLines = removeEmptyLinesInput == "yes";
                            validInput = true;
                        }
                        else
                        {
                            Console.WriteLine("Invalid input. Please enter 'yes' or 'no'.");
                        }
                    }
                    // Validate output directory
                    if (!output.Directory.Exists)
                    {
                        Console.WriteLine("Error: The specified output directory does not exist.");
                        return;
                    }
                    // Determine file extensions for the specified languages
                    var languageExtensions = new Dictionary<string, string[]>
                    {
                        { "csharp", new[] { ".cs" } },
                        { "python", new[] { ".py" } },
                        { "javascript", new[] { ".js" } },
                        { "java", new[] { ".java" } },
                        { "html", new[] { ".html", ".htm" } },
                        { "css", new[] { ".css" } },
                        { "jsx", new[] { ".jsx" } },
                        { "angular", new[] { ".ts" } }
                    };
                    var extensionsToInclude = language[0].ToLower() == "all"
                        ? languageExtensions.Values.SelectMany(ext => ext).Distinct().ToArray()
                        : language
                            .Where(lang => languageExtensions.ContainsKey(lang.ToLower()))
                            .SelectMany(lang => languageExtensions[lang.ToLower()])
                            .Distinct()
                            .ToArray();
                    if (!extensionsToInclude.Any())
                    {
                        Console.WriteLine("Error: No valid languages specified.");
                        return;
                    }
                    // Get all matching files in the current directory
                    var files = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.AllDirectories)
                        .Where(file => extensionsToInclude.Contains(Path.GetExtension(file).ToLower()))
                        .ToList();
                    if (!files.Any())
                    {
                        Console.WriteLine("No files matching the specified languages were found.");
                        return;
                    }
                    // Sorting files
                    files = sort == "type"
                        ? files.OrderBy(file => Path.GetExtension(file)).ThenBy(Path.GetFileName).ToList()
                        : files.OrderBy(Path.GetFileName).ToList();
                    // Create the output bundle
                    using var writer = new StreamWriter(output.FullName);
                    foreach (var file in files)
                    {
                        if (note)
                        {
                            writer.WriteLine($"// Origin: {file}");
                        }
                        var lines = File.ReadAllLines(file);
                        if (removeEmptyLines)
                        {
                            lines = lines.Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
                        }
                        foreach (var line in lines)
                        {
                            writer.WriteLine(line);
                        }
                        writer.WriteLine("\n####");
                    }
                    Console.WriteLine($"Bundle created at: {output.FullName}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }
            },
            outputOption,
            languageOption,
            noteOption,
            sortOption,
            removeEmptyLinesOption
        );
        //        var createRspCommand = new Command("create-rsp", "Create a response file for the bundle command.");
        //        createRspCommand.AddOption(new Option<string>(new[] { "--file", "-f" }, "The name of the response file to create (e.g., 'bundle.rsp')")
        //        {
        //            IsRequired = true
        //        });
        //        createRspCommand.SetHandler(async (string fileName) =>
        //        {
        //            try
        //            {
        //                Check if the file name is null or empty
        //                if (fileName == null)
        //                {
        //                    Console.WriteLine("Error: The file name is null.");
        //                    return;
        //                }
        //                Console.WriteLine($"File name received: '{fileName}'");
        //                Trim any leading / trailing spaces from the file name
        //               fileName = fileName.Trim();
        //                Debug print the cleaned file name
        //                Console.WriteLine($"Cleaned file name: '{fileName}'");
        //                Check for valid file name
        //                if (string.IsNullOrWhiteSpace(fileName) || !fileName.EndsWith(".rsp", StringComparison.OrdinalIgnoreCase))
        //                    {
        //                        Console.WriteLine("Error: The file name must end with '.rsp'.");
        //                        return;
        //                    }
        //                Collect parameters for the bundle command
        //               Console.Write("Enter output file path: ");
        //                string outputPath = Console.ReadLine()!;
        //                Console.Write("Enter programming languages (comma-separated, or 'all'): ");
        //                string languages = Console.ReadLine()!;
        //                Console.Write("Include file origin as comments? (yes/no): ");
        //                string includeNote = Console.ReadLine()!;
        //                Console.Write("Enter sort order ('name' or 'type'): ");
        //                string sortOrder = Console.ReadLine()?.ToLower();
        //                Console.Write("Remove empty lines? (yes/no): ");
        //                string removeEmptyLines = Console.ReadLine()?.ToLower();
        //                var rspContent = new List<string>
        //            {
        //                $"--output \"{outputPath}\"",
        //                $"--language {languages}",
        //                includeNote == "yes" ? "--note" : string.Empty,
        //                $"--sort {sortOrder}",
        //                removeEmptyLines == "yes" ? "--remove-empty-lines" : string.Empty
        //            };
        //                Write to .rsp file
        //                File.WriteAllLines(fileName, rspContent.Where(line => !string.IsNullOrWhiteSpace(line)));
        //                Console.WriteLine($"Response file '{fileName}' created.");
        //            }
        //            catch (Exception ex)
        //            {
        //                Console.WriteLine($"Error: {ex.Message}");
        //            }
        //        },
        //    new Option<string>(new[] { "--file", "-f" })); // Add missing file argument
        //        var rootCommand = new RootCommand
        //    {
        //        bundleCommand,
        //        createRspCommand
        //    };
        //        await rootCommand.InvokeAsync(args);
        //    }
        //}
        var createRspCommand = new Command("create-rsp", "Create a response file with a ready command.");
        createRspCommand.SetHandler(() =>
        {
            try
            {
                Console.WriteLine("Creating a response file for the bundle command.");
                Console.Write("Enter output file path: ");
                string outputPath = Console.ReadLine()!;
                Console.Write("Enter programming languages (comma-separated, or 'all'): ");
                string languages = Console.ReadLine()!;
                Console.Write("Include file origin as comments? (yes/no): ");
                string noteInput = Console.ReadLine()!;
                bool note = noteInput.Equals("yes", StringComparison.OrdinalIgnoreCase);
                Console.Write("Enter sort order ('name' or 'type'): ");
                string sort = Console.ReadLine()!;
                Console.Write("Remove empty lines? (yes/no): ");
                string removeEmptyLinesInput = Console.ReadLine()!;
                bool removeEmptyLines = removeEmptyLinesInput.Equals("yes", StringComparison.OrdinalIgnoreCase);
                // Build the command string
                var command = $"dotnet bundle --output \"{outputPath}\" --language {languages} --sort {sort}" +
                              $"{(note ? " --note" : "")}{(removeEmptyLines ? " --remove-empty-lines" : "")}";
                // Ask for the response file name
                Console.Write("Enter response file name (without extension): ");
                string responseFileName = Console.ReadLine()!;
                // Save to .rsp file
                var rspFilePath = $"{responseFileName}.rsp";
                File.WriteAllText(rspFilePath, command);
                Console.WriteLine($"Response file created: {rspFilePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        });
        var rootCommand = new RootCommand("CLI tool for bundling files and creating response files.");
        rootCommand.AddCommand(bundleCommand);
        rootCommand.AddCommand(createRspCommand);
        await rootCommand.InvokeAsync(args);
    }
}

####
